"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã
"""
import os
import time
from dotenv import load_dotenv

from rag_system import RAGSystem
from config import Config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def print_separator(title=""):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    print("\n" + "=" * 60)
    if title:
        print(f" {title}")
        print("=" * 60)

def demo_rag_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π RAG-—Å–∏—Å—Ç–µ–º—ã"""
    
    print_separator("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø RAG-–°–ò–°–¢–ï–ú–´")
    print("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Open RAG Benchmark")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        print_separator("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï")
        print("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–î–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º:")
        print("OPENAI_API_KEY=your_api_key_here")
        print("\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    print_separator("üìö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
    config = Config()
    rag_system = RAGSystem(config)
    
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    start_time = time.time()
    rag_system.initialize_system()
    init_time = time.time() - start_time
    
    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {init_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = rag_system.get_system_stats()
    print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {stats['vector_store'].get('document_count', 0)}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats['config']['embedding_model']}")
    print(f"üß† LLM –º–æ–¥–µ–ª—å: {stats['config']['llm_model']}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    print_separator("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–ò–°–ö–ê")
    
    demo_queries = [
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
        "–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    ]
    
    for query in demo_queries:
        print(f"\nüîé –ü–æ–∏—Å–∫: '{query}'")
        results = rag_system.search_documents(query, n_results=3)
        
        if results:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            for i, doc in enumerate(results, 1):
                metadata = doc.get('metadata', {})
                title = metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è')
                content_type = metadata.get('content_type', 'text')
                distance = doc.get('distance', 0)
                similarity = 1 - distance if distance else 0
                
                print(f"   {i}. {title}")
                print(f"      –¢–∏–ø: {content_type}, –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.3f}")
        else:
            print("   –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    if rag_system.llm:
        print_separator("üí¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–û–í")
        
        demo_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏?"
        ]
        
        for question in demo_questions:
            print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            print("ü§î –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
            
            start_time = time.time()
            result = rag_system.generate_answer(question, n_results=3)
            gen_time = time.time() - start_time
            
            if result.get('error'):
                print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                print(f"üí° –û—Ç–≤–µ—Ç ({gen_time:.2f}—Å):")
                print(f"   {result['answer']}")
                print(f"   üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(result.get('context', []))}")
    else:
        print_separator("‚ö†Ô∏è –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–û–í –û–¢–ö–õ–Æ–ß–ï–ù–ê")
        print("–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    print_separator("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
    
    print("üîç –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:")
    text_results = rag_system.search_documents("–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", content_type="text")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(text_results)}")
    
    print("üîç –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:")
    table_results = rag_system.search_documents("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", content_type="table")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(table_results)}")
    
    print("üîç –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö:")
    image_results = rag_system.search_documents("–¥–∏–∞–≥—Ä–∞–º–º–∞", content_type="image")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_results)}")
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    print_separator("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("RAG-—Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("\n–î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("  ‚Ä¢ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: python main.py")
    print("  ‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: streamlit run app.py")
    print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python test_system.py")

if __name__ == "__main__":
    demo_rag_system()
