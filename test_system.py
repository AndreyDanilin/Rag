"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã
"""
import os
import logging
from dotenv import load_dotenv

from rag_system import RAGSystem
from config import Config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_rag_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG-—Å–∏—Å—Ç–µ–º—ã")
    print("=" * 40)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = Config()
    rag_system = RAGSystem(config)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    print("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    rag_system.initialize_system()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
        "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π?",
        "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    for question in test_questions:
        print(f"\n–í–æ–ø—Ä–æ—Å: {question}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        search_results = rag_system.search_documents(question, n_results=3)
        print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(search_results)}")
        
        if search_results:
            for i, doc in enumerate(search_results, 1):
                metadata = doc.get('metadata', {})
                title = metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è')
                content_type = metadata.get('content_type', 'text')
                print(f"  {i}. {title} ({content_type})")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω LLM)
    if rag_system.llm:
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤...")
        for question in test_questions[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –≤–æ–ø—Ä–æ—Å–∞
            print(f"\n–í–æ–ø—Ä–æ—Å: {question}")
            result = rag_system.generate_answer(question, n_results=2)
            
            if result.get('error'):
                print(f"–û—à–∏–±–∫–∞: {result['error']}")
            else:
                print(f"–û—Ç–≤–µ—Ç: {result['answer'][:200]}...")
    else:
        print("\n‚ö†Ô∏è LLM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    stats = rag_system.get_system_stats()
    print(f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {stats['vector_store'].get('document_count', 0)}")
    print(f"- –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats['config']['embedding_model']}")
    print(f"- LLM –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {stats['llm_configured']}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_rag_system()
