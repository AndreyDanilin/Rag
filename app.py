"""
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã
"""
import streamlit as st
import logging
from typing import Dict, Any
import json

from rag_system import RAGSystem
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RAG-—Å–∏—Å—Ç–µ–º–∞ –Ω–∞ Open RAG Benchmark",
    page_icon="üìö",
    layout="wide"
)

@st.cache_resource
def initialize_rag_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG-—Å–∏—Å—Ç–µ–º—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    config = Config()
    rag_system = RAGSystem(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    collection_info = rag_system.vector_store.get_collection_info()
    
    if collection_info.get('document_count', 0) == 0:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å –¥–∞–Ω–Ω—ã–º–∏
        with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã..."):
            rag_system.initialize_system()
    
    return rag_system

def display_document_info(doc: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    metadata = doc.get('metadata', {})
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.write(f"**–°—Ç–∞—Ç—å—è:** {metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}")
        st.write(f"**–ê–≤—Ç–æ—Ä—ã:** {metadata.get('authors', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã')}")
        st.write(f"**–°–µ–∫—Ü–∏—è:** {metadata.get('section_id', 'N/A')}")
        st.write(f"**–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {metadata.get('content_type', 'text')}")
    
    with col2:
        distance = doc.get('distance')
        if distance is not None:
            similarity = 1 - distance  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Å—Ö–æ–∂–µ—Å—Ç—å
            st.metric("–°—Ö–æ–∂–µ—Å—Ç—å", f"{similarity:.3f}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üìö RAG-—Å–∏—Å—Ç–µ–º–∞ –Ω–∞ Open RAG Benchmark")
    st.markdown("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    try:
        rag_system = initialize_rag_system()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        n_results = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞",
            min_value=1,
            max_value=10,
            value=5
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = st.selectbox(
            "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            ["–í—Å–µ", "text", "table", "image"],
            index=0
        )
        
        if content_type == "–í—Å–µ":
            content_type = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats = rag_system.get_system_stats()
        
        st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î", stats['vector_store'].get('document_count', 0))
        st.metric("–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", stats['config']['embedding_model'].split('/')[-1])
        st.metric("LLM –º–æ–¥–µ–ª—å", stats['config']['llm_model'])
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"):
            with st.spinner("–°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã..."):
                rag_system.reset_system()
                st.success("–°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞!")
                st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    tab1, tab2, tab3 = st.tabs(["üí¨ –í–æ–ø—Ä–æ—Å—ã", "üîç –ü–æ–∏—Å–∫", "üìà –ê–Ω–∞–ª–∏–∑"])
    
    with tab1:
        st.header("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–µ")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
        question = st.text_area(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            height=100
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if st.button("üöÄ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", type="primary"):
            if question.strip():
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞..."):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                        result = rag_system.ask_question(
                            question,
                            n_results=n_results,
                            content_type=content_type
                        )
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
                        st.subheader("üí° –û—Ç–≤–µ—Ç:")
                        st.write(result['answer'])
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        if result.get('context'):
                            st.subheader("üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:")
                            
                            for i, doc in enumerate(result['context'], 1):
                                with st.expander(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i}"):
                                    display_document_info(doc)
                                    st.write("**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**")
                                    st.write(doc['content'])
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        with st.expander("‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                            st.json({
                                "–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞": result.get('context_length', 0),
                                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤": len(result.get('context', [])),
                                "–ú–æ–¥–µ–ª—å": result.get('system_info', {}).get('llm_model', 'N/A')
                            })
                    
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
    
    with tab2:
        st.header("–ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
        
        # –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = st.text_input(
            "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"
        )
        
        if st.button("üîç –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"):
            if search_query.strip():
                with st.spinner("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                        results = rag_system.search_documents(
                            search_query,
                            n_results=n_results,
                            content_type=content_type
                        )
                        
                        if results:
                            st.subheader(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
                            
                            for i, doc in enumerate(results, 1):
                                with st.expander(f"–î–æ–∫—É–º–µ–Ω—Ç {i}"):
                                    display_document_info(doc)
                                    st.write("**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**")
                                    st.write(doc['content'])
                        else:
                            st.warning("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    
    with tab3:
        st.header("–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        try:
            text_docs = rag_system.vector_store.get_documents_by_content_type("text")
            table_docs = rag_system.vector_store.get_documents_by_content_type("table")
            image_docs = rag_system.vector_store.get_documents_by_content_type("image")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏", len(text_docs))
            
            with col2:
                st.metric("–¢–∞–±–ª–∏—Ü—ã", len(table_docs))
            
            with col3:
                st.metric("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", len(image_docs))
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            stats = rag_system.get_system_stats()
            st.json(stats)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    main()
